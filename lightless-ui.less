/*
	Lightless UI
	Project Page - http://
	Author - Kaspar Vihm
	Site - www.kasparvihm-com
*/

/* GLOBALS */

HTML, BODY {
	margin: 0;
	padding: 0;
}

*, *:after, *:before {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

.clear() {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

.clear {
	.clear();
}

/* Demo */
#wrap {
	max-width: 1024px;
	margin: auto;
	background: #dedede;
	padding: 30px;
}
[class*="col-"] {
    padding-top: @column-spacing;
    padding-bottom: @column-spacing;
    background-color: #eee;
    border: 1px solid #ddd;
    padding-left:  floor((@gutter / 2));
	padding-right: ceil((@gutter / 2));
	position: relative;
	text-align: center;
	float: left;
}
/* GRID */

// Grid options

@mobile: 480px;		// max width
@tablet: 750px;		// min width
@desktop: 1024px; 	// min width

@sm: ~"only screen and (max-width: @{mobile})";
@md: ~"only screen and (max-width: @{tablet})";
@lg: ~"only screen and (max-width: @{desktop})";

@columns: 12;
@column-spacing: 15px;
@gutter: 30px;
@row-dependency: true;


// Define container

.container {
	margin: auto;
	padding-left:  floor((@gutter / 2));
	padding-right: ceil((@gutter / 2));
	&:extend(.clear all);
}

// Make row

.make-row(@row-dependency) {
  margin-left:  ceil((@gutter / -2));
  margin-right: floor((@gutter / -2));
	& when (@row-dependency = true) {
  		&:extend(.clear all);
	}
}
.row {
  .make-row(@row-dependency);
}

// Define column types and attributes

.define-columns(@index, @class, @type) {
	& when (@type = main) and (@index > 0) {
		.col--@{class}-@{index} {
			width: percentage((@index / @columns));
			padding-left:  (@gutter / 2);
			padding-right: (@gutter / 2);
		}
	}
	& when (@type = push) and (@index > 0) {
		.col--@{class}-push-@{index} {
			left: percentage((@index / @columns));
			clear: left;
			clear: left;
		}
	}
	& when (@type = push) and (@index = 0) {
		.col--@{class}-push-0 {
			left: auto;
			clear: left;
		}
	}
	& when (@type = pull) and (@index > 0) {
		.col--@{class}-pull-@{index} {
			right: percentage((@index / @columns));
			// clear: left;
		}
	}
	& when (@type = pull) and (@index = 0) {
		.col--@{class}-pull-0 {
			right: auto;
			// clear: left;
		}
	}
	& when (@type = offset) {
		.col--@{class}-offset-@{index} {
			margin-left: percentage((@index / @columns));
			// clear: left;
		}
	}
}

// Generate columns

.generate-columns(@index, @class, @type) when (@index >= 0) {
  .define-columns(@index, @class, @type);
  .generate-columns((@index - 1), @class, @type);
}

// Make grid

.make-grid(@class) {
  .generate-columns(@columns, @class, main);
  .generate-columns(@columns, @class, pull);
  .generate-columns(@columns, @class, push);
  .generate-columns(@columns, @class, offset);
}


.make-grid(lg);

@media @md{
	.make-grid(md);
}
@media @sm {
	.make-grid(sm);
}

